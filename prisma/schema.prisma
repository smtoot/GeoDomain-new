// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum DomainStatus {
  DRAFT
  PENDING_VERIFICATION
  VERIFIED
  PAUSED
  REJECTED
}

enum PriceType {
  FIXED
  NEGOTIABLE
  MAKE_OFFER
}

enum InquiryStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  FORWARDED
  COMPLETED
}

enum MessageStatus {
  PENDING
  APPROVED
  REJECTED
  EDITED
}

enum SenderType {
  BUYER
  SELLER
}

enum FileStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DealStatus {
  NEGOTIATING
  AGREED
  PAYMENT_PENDING
  PAYMENT_CONFIRMED
  TRANSFER_INITIATED
  COMPLETED
  DISPUTED
}

enum PaymentMethod {
  ESCROW_COM
  PAYPAL
  WIRE_TRANSFER
  CRYPTO
  OTHER
}

enum PaymentStatus {
  PENDING
  IN_PROGRESS
  CONFIRMED
  FAILED
  DISPUTED
}

enum TransferStatus {
  PENDING
  INITIATED
  IN_PROGRESS
  COMPLETED
  FAILED
  DISPUTED
}

enum GeographicScope {
  NATIONAL
  STATE
  CITY
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  DISPUTED
}

enum VerificationMethod {
  DNS_TXT
  FILE_UPLOAD
}

enum VerificationStatus {
  PENDING
  VERIFIED
  FAILED
}

enum ModerationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// User Management
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String?
  role          UserRole @default(SELLER)
  status        UserStatus @default(ACTIVE)
  avatar        String?
  phone         String?
  company       String?
  emailVerified DateTime?
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLoginAt   DateTime?

  // Relations
  ownedDomains     Domain[]
  buyerInquiries   Inquiry[] @relation("BuyerInquiries")
  sellerInquiries  Inquiry[] @relation("SellerInquiries")
  buyerDeals       Deal[] @relation("BuyerDeals")
  sellerDeals      Deal[] @relation("SellerDeals")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  adminReviews     InquiryModeration[] @relation("AdminReviews")
  adminMessages    MessageModeration[] @relation("AdminMessageReviews")
  auditLogs        AuditLog[] @relation("UserAuditLogs")
  adminAuditLogs   AuditLog[] @relation("AdminAuditLogs")
  buyerTransactions Transaction[]

  @@map("users")
  @@index([email])
  @@index([role, status])
  @@index([createdAt])
}

// Domain Management
model Domain {
  id                String        @id @default(cuid())
  name              String        @unique
  price             Float
  priceType         PriceType     @default(FIXED)
  description       String?
  
  // Enhanced Geographic Classification
  geographicScope   GeographicScope @default(STATE)
  stateId           String?       // Foreign key to USState
  cityId            String?       // Foreign key to USCity
  
  // Enhanced Category Classification
  categoryId        String?       // Foreign key to DomainCategory
  
  logoUrl           String?
  metaTitle         String?
  metaDescription   String?
  tags              String? // JSON string
  status            DomainStatus  @default(DRAFT)
  verificationToken String?       @unique
  whoisData         String? // JSON string
  registrar         String?
  expirationDate    DateTime?
  ownerId           String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  publishedAt       DateTime?

  // Relations
  owner             User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  category          DomainCategory? @relation(fields: [categoryId], references: [id])
  state             USState?      @relation(fields: [stateId], references: [id])
  city              USCity?       @relation(fields: [cityId], references: [id])
  inquiries         Inquiry[]
  deals             Deal[]
  verificationAttempts VerificationAttempt[]
  analytics         DomainAnalytics[]
  transactions      Transaction[]
  transfers         DomainTransfer[]

  @@map("domains")
  @@index([status, createdAt])
  @@index([geographicScope, stateId, cityId])
  @@index([categoryId, price])
  @@index([ownerId, status])
  @@index([name])
  @@index([publishedAt])
}

// Inquiry System with Admin Moderation
model Inquiry {
  id            String   @id @default(cuid())
  domainId      String
  buyerId       String
  sellerId      String
  buyerName     String
  buyerEmail    String
  buyerPhone    String?
  buyerCompany  String?
  anonymousBuyerId String? // Anonymous identifier for sellers
  budgetRange   String
  intendedUse   String
  timeline      String?
  message       String
  status        InquiryStatus @default(PENDING_REVIEW)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  domain        Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  buyer         User     @relation("BuyerInquiries", fields: [buyerId], references: [id], onDelete: Cascade)
  seller        User     @relation("SellerInquiries", fields: [sellerId], references: [id], onDelete: Cascade)
  messages      Message[]
  moderations   InquiryModeration[]
  deals         Deal[]

  @@map("inquiries")
  @@index([status, createdAt])
  @@index([domainId, status])
  @@index([sellerId, status])
  @@index([buyerId, status])
  @@index([buyerEmail])
}

// Inquiry Moderation
model InquiryModeration {
  id              String          @id @default(cuid())
  inquiryId       String
  adminId         String
  status          InquiryStatus
  adminNotes      String?
  rejectionReason String?
  reviewDate      DateTime        @default(now())
  approvedDate    DateTime?
  forwardedDate   DateTime?
  priority        ModerationPriority @default(MEDIUM)

  // Relations
  inquiry         Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  admin           User    @relation("AdminReviews", fields: [adminId], references: [id], onDelete: Cascade)

  @@map("inquiry_moderations")
  @@index([inquiryId])
  @@index([status, priority])
  @@index([reviewDate])
}

// Message System with Admin Moderation
model Message {
  id          String        @id @default(cuid())
  inquiryId   String
  senderId    String
  receiverId  String
  senderType  SenderType
  content     String
  status      MessageStatus @default(PENDING)
  sentDate    DateTime      @default(now())
  approvedDate DateTime?
  deliveredDate DateTime?

  // Relations
  inquiry     Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  sender      User    @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  moderations MessageModeration[]
  attachments FileAttachment[]

  @@map("messages")
  @@index([inquiryId, sentDate])
  @@index([senderId, status])
  @@index([receiverId, status])
  @@index([status, sentDate])
}

// Message Moderation
model MessageModeration {
  id              String        @id @default(cuid())
  messageId       String
  adminId         String
  status          MessageStatus
  adminNotes      String?
  rejectionReason String?
  reviewDate      DateTime      @default(now())

  // Relations
  message         Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  admin           User    @relation("AdminMessageReviews", fields: [adminId], references: [id], onDelete: Cascade)

  @@map("message_moderations")
  @@index([messageId])
  @@index([status, reviewDate])
}

// File Attachments
model FileAttachment {
  id          String   @id @default(cuid())
  messageId   String
  fileName    String
  fileType    String
  fileSize    Int
  fileUrl     String
  status      FileStatus @default(PENDING)
  adminNotes  String?
  createdAt   DateTime @default(now())

  // Relations
  message     Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("file_attachments")
  @@index([messageId])
  @@index([status, createdAt])
}

// Deal Agreement System for Manual Payments
model Deal {
  id                    String        @id @default(cuid())
  inquiryId             String
  buyerId               String
  sellerId              String
  domainId              String
  agreedPrice           Float
  currency              String        @default("USD")
  paymentMethod         PaymentMethod
  paymentInstructions   String
  timeline              String
  terms                 String
  status                DealStatus    @default(NEGOTIATING)
  adminNotes            String?
  adminVerification     Boolean       @default(false)
  documentation         String?
  agreedDate            DateTime?
  paymentConfirmedDate  DateTime?
  transferInitiatedDate DateTime?
  completedDate         DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  inquiry               Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  buyer                 User    @relation("BuyerDeals", fields: [buyerId], references: [id], onDelete: Cascade)
  seller                User    @relation("SellerDeals", fields: [sellerId], references: [id], onDelete: Cascade)
  domain                Domain  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  payments              Payment[]
  transactions          Transaction[]
  transfers             DomainTransfer[]

  @@map("deals")
  @@index([status, createdAt])
  @@index([inquiryId])
  @@index([buyerId, status])
  @@index([sellerId, status])
  @@index([domainId])
}

// External Payment Tracking
model Payment {
  id                    String        @id @default(cuid())
  dealId                String
  paymentMethod         PaymentMethod
  amount                Float
  currency              String        @default("USD")
  paymentInstructions   String
  escrowService         String?
  status                PaymentStatus @default(PENDING)
  adminVerification     Boolean       @default(false)
  adminNotes            String?
  externalReference     String?
  serviceProvider       String
  serviceInstructions   String
  verificationDate      DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  deal                  Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("payments")
  @@index([dealId])
  @@index([status, createdAt])
  @@index([externalReference])
}

// Domain Transfer Coordination
model DomainTransfer {
  id                    String            @id @default(cuid())
  dealId                String
  domainId              String
  fromRegistrar         String
  toRegistrar           String
  transferInstructions  String
  estimatedTimeline     String
  status                TransferStatus    @default(PENDING)
  adminCoordination     Boolean           @default(true)
  adminNotes            String?
  completionVerification Boolean           @default(false)
  transferDocumentation String
  registrarInstructions String
  completionCertificate String?
  initiatedDate         DateTime?
  completedDate         DateTime?
  verifiedDate          DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  deal                  Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)
  domain                Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("domain_transfers")
  @@index([dealId])
  @@index([domainId])
  @@index([status, createdAt])
}

// Transaction System (for future automated payments)
model Transaction {
  id          String            @id @default(cuid())
  dealId      String?
  domainId    String
  buyerId     String
  amount      Float
  currency    String            @default("USD")
  commission  Float
  netAmount   Float
  paymentMethod PaymentMethod
  paymentId   String?
  escrowId    String?
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  completedAt DateTime?

  // Relations
  deal        Deal?   @relation(fields: [dealId], references: [id])
  domain      Domain  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  buyer       User    @relation(fields: [buyerId], references: [id], onDelete: Cascade)

  @@map("transactions")
  @@index([dealId])
  @@index([domainId])
  @@index([buyerId])
  @@index([status, createdAt])
}

// Domain Verification System
model VerificationAttempt {
  id          String              @id @default(cuid())
  domainId    String
  method      VerificationMethod
  status      VerificationStatus  @default(PENDING)
  token       String?
  fileUrl     String?
  adminNotes  String?
  verifiedAt  DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  domain      Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("verification_attempts")
  @@index([domainId])
  @@index([status, createdAt])
  @@index([token])
}

// Analytics and Tracking
model DomainAnalytics {
  id          String   @id @default(cuid())
  domainId    String
  date        DateTime
  views       Int      @default(0)
  inquiries   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  domain      Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@unique([domainId, date])
  @@map("domain_analytics")
  @@index([domainId, date])
  @@index([date])
}

// Audit Logging
model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  adminId     String?
  action      String
  resource    String
  resourceId  String?
  details     String? // JSON string
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())

  // Relations
  user        User?       @relation("UserAuditLogs", fields: [userId], references: [id])
  admin       User?       @relation("AdminAuditLogs", fields: [adminId], references: [id])

  @@map("audit_logs")
  @@index([userId])
  @@index([adminId])
  @@index([action, createdAt])
  @@index([resource, resourceId])
}

// Feature Flags
model FeatureFlag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  enabled     Boolean  @default(false)
  targetUsers String? // JSON string for user targeting
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("feature_flags")
  @@index([name])
  @@index([enabled])
}

// Domain Categories Management
model DomainCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  examples    String   // Comma-separated example domain names
  industries  String   // Comma-separated related industries
  enabled     Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  domains     Domain[]

  @@map("domain_categories")
  @@index([name])
  @@index([enabled])
}

// US States Management
model USState {
  id          String   @id @default(cuid())
  name        String   @unique
  abbreviation String  @unique // e.g., "TX", "CA", "NY"
  population  Int?     // Optional population data
  enabled     Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  domains     Domain[]
  cities      USCity[]

  @@map("us_states")
  @@index([name])
  @@index([abbreviation])
  @@index([enabled])
}

// US Cities Management
model USCity {
  id          String   @id @default(cuid())
  name        String
  stateId     String
  population  Int?     // Optional population data
  enabled     Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  state       USState  @relation(fields: [stateId], references: [id], onDelete: Cascade)
  domains     Domain[]

  @@map("us_cities")
  @@index([name])
  @@index([stateId])
  @@index([enabled])
  @@unique([name, stateId]) // Unique city name within each state
}
