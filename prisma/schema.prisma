// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(BUYER)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  domains     Domain[]
  inquiries   Inquiry[] @relation("BuyerInquiries")
  sellerInquiries Inquiry[] @relation("SellerInquiries")
  deals       Deal[] @relation("BuyerDeals")
  sellerDeals Deal[] @relation("SellerDeals")

  @@map("users")
}

model Domain {
  id          String      @id @default(cuid())
  name        String      @unique
  price       Float
  category    String
  state       String?
  city        String?
  description String?
  status      DomainStatus @default(PENDING)
  isFeatured  Boolean     @default(false)
  ownerId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  inquiries Inquiry[]
  deals     Deal[]

  @@map("domains")
}

model Inquiry {
  id          String        @id @default(cuid())
  domainId    String
  buyerId     String
  sellerId    String
  subject     String
  message     String
  status      InquiryStatus @default(OPEN)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  domain  Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
  buyer   User   @relation("BuyerInquiries", fields: [buyerId], references: [id], onDelete: Cascade)
  seller  User   @relation("SellerInquiries", fields: [sellerId], references: [id], onDelete: Cascade)
  deals   Deal[]

  @@map("inquiries")
}

model Deal {
  id          String     @id @default(cuid())
  inquiryId   String
  domainId    String
  buyerId     String
  sellerId    String
  price       Float
  status      DealStatus @default(NEGOTIATING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  inquiry Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  domain  Domain  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  buyer   User    @relation("BuyerDeals", fields: [buyerId], references: [id], onDelete: Cascade)
  seller  User    @relation("SellerDeals", fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("deals")
}

// Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum DomainStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum InquiryStatus {
  OPEN
  CLOSED
  PENDING_REVIEW
}

enum DealStatus {
  NEGOTIATING
  AGREED
  COMPLETED
  CANCELLED
}